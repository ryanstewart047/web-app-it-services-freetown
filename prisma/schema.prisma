generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Use DATABASE_URL which should point to Prisma Accelerate URL
  url      = env("DATABASE_URL")
  // Use DIRECT_URL for migrations (direct database connection)
  directUrl = env("DIRECT_URL")
}

model Customer {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  phone        String
  address      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  chatSessions ChatSession[]
  repairs      Repair[]
}

model Appointment {
  id               String   @id @default(cuid())
  customerId       String
  deviceType       String
  deviceModel      String
  issueDescription String
  serviceType      String
  preferredDate    String
  preferredTime    String
  status           String   @default("pending")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  customer         Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  repair           Repair?
}

model Repair {
  id                  String           @id @default(cuid())
  trackingId          String           @unique
  appointmentId       String?          @unique
  customerId          String
  deviceType          String
  deviceModel         String
  issueDescription    String
  status              String           @default("received")
  estimatedCost       Float?
  actualCost          Float?
  estimatedCompletion String?
  actualCompletion    String?
  dateReceived        DateTime         @default(now())
  dateCompleted       DateTime?
  notes               String           @default("")
  technicianId        String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  appointment         Appointment?     @relation(fields: [appointmentId], references: [id])
  customer            Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  technician          Technician?      @relation(fields: [technicianId], references: [id])
  notes_relation      RepairNote[]     @relation("RepairNotes")
  timeline            RepairTimeline[]
}

model Technician {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  phone        String
  role         String        @default("technician")
  expertise    String
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  chatSessions ChatSession[]
  repairs      Repair[]
}

model RepairTimeline {
  id          String    @id @default(cuid())
  repairId    String
  step        String
  status      String
  timestamp   DateTime?
  description String
  createdAt   DateTime  @default(now())
  repair      Repair    @relation(fields: [repairId], references: [id], onDelete: Cascade)
}

model RepairNote {
  id        String   @id @default(cuid())
  repairId  String
  note      String
  author    String
  timestamp DateTime @default(now())
  type      String   @default("general")
  repair    Repair   @relation("RepairNotes", fields: [repairId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id           String        @id @default(cuid())
  customerId   String
  technicianId String?
  status       String        @default("active")
  startedAt    DateTime      @default(now())
  endedAt      DateTime?
  messages     ChatMessage[]
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  technician   Technician?   @relation(fields: [technicianId], references: [id])
}

model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  content     String
  sender      String
  messageType String      @default("text")
  createdAt   DateTime    @default(now())
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model AITroubleshooting {
  id               String   @id @default(cuid())
  customerId       String?
  deviceType       String
  deviceModel      String?
  issueDescription String
  aiDiagnosis      String
  confidence       Float
  steps            String
  escalated        Boolean  @default(false)
  createdAt        DateTime @default(now())
}

// Marketplace Models
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  image       String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  description String
  price       Float
  comparePrice Float?        // Original price for showing discounts
  categoryId  String
  stock       Int            @default(0)
  status      String         @default("active") // active, out_of_stock, discontinued
  images      ProductImage[]
  sku         String?        @unique
  brand       String?
  tags        String[]       // For search and filtering
  featured    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    Category       @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  
  @@index([categoryId])
  @@index([status])
  @@index([slug])
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int      @default(0) // For sorting images
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  sessionId String     @unique // For guest users
  userId    String?    // For logged-in users
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float    // Store price at time of adding to cart
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([cartId, productId])
  @@index([cartId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  customerName    String
  customerEmail   String
  customerPhone   String
  customerAddress String
  items           OrderItem[]
  subtotal        Float
  tax             Float       @default(0)
  total           Float
  paymentMethod   String      // mobile_money, cash
  paymentStatus   String      @default("pending") // pending, paid, failed
  orderStatus     String      @default("pending") // pending, processing, shipped, delivered, cancelled
  mobileMoneyNumber String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([orderNumber])
  @@index([customerEmail])
  @@index([orderStatus])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float    // Price at time of purchase
  subtotal  Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  
  @@index([orderId])
}
